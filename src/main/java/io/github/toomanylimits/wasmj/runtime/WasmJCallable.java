package io.github.toomanylimits.wasmj.runtime;

import io.github.toomanylimits.wasmj.runtime.errors.JvmCodeError;
import io.github.toomanylimits.wasmj.runtime.errors.WasmException;

import java.util.List;

/**
 * Simple interface for a callable WasmJ function.
 *
 * Also deals with catching all JVM errors that happen inside,
 * like NullPointerException.
 */
@FunctionalInterface
public interface WasmJCallable {

    /**
     * The function to implement, throwing any type of error.
     * This is called by generated bytecode.
     */
    List<Object> call_impl(Object... params) throws Throwable;

    /**
     * The function which should be called by users, wrapping
     * certain helpful behavior.
     *
     * For now, it just wraps JVM errors in a special WasmException type.
     */
    default List<Object> call(Object... params) throws WasmException {
        try {
            return call_impl(params);
        } catch (WasmException e) {
            // If it's a WasmException, throw it again
            throw e;
        } catch (Throwable t) {
            // If it isn't, then wrap it in the JvmCodeError
            throw new JvmCodeError(t);
        }
    }

}