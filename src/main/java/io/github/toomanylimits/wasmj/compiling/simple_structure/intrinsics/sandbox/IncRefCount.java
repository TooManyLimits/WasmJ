package io.github.toomanylimits.wasmj.compiling.simple_structure.intrinsics.sandbox;

import io.github.toomanylimits.wasmj.compiling.compiler.CompilingSimpleInstructionVisitor;
import io.github.toomanylimits.wasmj.compiling.helpers.Names;
import io.github.toomanylimits.wasmj.compiling.simple_structure.SimpleInstruction;
import io.github.toomanylimits.wasmj.compiling.simple_structure.SimpleModule;
import io.github.toomanylimits.wasmj.compiling.simple_structure.intrinsics.ClassGenCallback;
import io.github.toomanylimits.wasmj.runtime.sandbox.InstanceLimiter;
import io.github.toomanylimits.wasmj.runtime.sandbox.RefCountable;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

/**
 * Not generated by any WASM instruction in particular, but is emitted
 * sometimes when compiling to keep code cleaner.
 *
 * Pops a RefCountable from the top of the stack and increments its refcount.
 */
public class IncRefCount implements SimpleInstruction.Intrinsic {

    public static final IncRefCount INSTANCE = new IncRefCount();
    private IncRefCount() {}

    @Override
    public void atCallSite(SimpleModule module, MethodVisitor visitor, CompilingSimpleInstructionVisitor compilingVisitor) {
        if (!module.instance.limiter.countsMemory)
            throw new IllegalStateException("IncRefCount intrinsic should only be generated when the module counts memory - bug in compiler!");
        // Get limiter, call inc().
        visitor.visitFieldInsn(Opcodes.GETSTATIC, Names.className(module.moduleName), Names.limiterFieldName(), Type.getDescriptor(InstanceLimiter.class));
        visitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, Type.getInternalName(RefCountable.class), "inc", Type.getMethodDescriptor(Type.getType(void.class), Type.getType(InstanceLimiter.class)), false);
    }

    @Override
    public ClassGenCallback classGenCallback() {
        return null;
    }
}
